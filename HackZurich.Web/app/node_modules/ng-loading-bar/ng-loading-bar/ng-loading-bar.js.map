{"version":3,"file":"ng-loading-bar.js","sources":["~/ng-loading-bar/ng-loading-bar/src/ng-loading-bar.ts","~/ng-loading-bar/ng-loading-bar/src/loading-bar.module.ts","~/ng-loading-bar/ng-loading-bar/src/loading-bar.component.ts","~/ng-loading-bar/ng-loading-bar/src/loading-bar.http.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {NgLoadingBarModule,NgLoadingBarHttp,NgLoadingBarComponent} from './index';\n\nexport {httpFactory as Éµa} from './loading-bar.module';","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpModule, Http, XHRBackend, RequestOptions } from '@angular/http';\nimport { NgLoadingBarHttp } from './loading-bar.http';\nimport { NgLoadingBarComponent } from './loading-bar.component';\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n    return new NgLoadingBarHttp(xhrBackend, requestOptions);\n}\nexport class NgLoadingBarModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n      return {\n        ngModule: NgLoadingBarModule,\n        providers: [\n            { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n        ],\n      };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    declarations: [\n        NgLoadingBarComponent,\n    ],\n    imports: [\n        HttpModule,\n    ],\n    exports: [\n        NgLoadingBarComponent,\n    ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgLoadingBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgLoadingBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgLoadingBarModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Inject, Component, ViewChild, Renderer, AfterViewInit, Input } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { NgLoadingBarHttp } from './loading-bar.http';\nexport class NgLoadingBarComponent implements AfterViewInit {\n     _spinner: any;\n     _loadingBarContainer: any;\n     _loadingBar: any;\n\n     includeSpinner: boolean = true;\nprivate _autoIncrement: boolean = true;\nprivate _includeBar: boolean = true;\nprivate _latencyThreshold: number = 10;\nprivate _startSize: number = 0.02;\nprivate _started: boolean = false;\nprivate _status: number = 0;\nprivate _incTimeout: any;\nprivate _completeTimeout: any;\nprivate _startTimeout: any;\n/**\n * @param {?} _renderer\n * @param {?} http\n */\nconstructor(private _renderer: Renderer,  http: NgLoadingBarHttp) {\n        if (http instanceof NgLoadingBarHttp) {\n            http.pending.subscribe((progress: any) => {\n                if (progress.started) this.start();\n                if (progress.completed) this.complete();\n            });\n        }\n    }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n        this.hide(this._loadingBarContainer);\n        this.hide(this._spinner);\n    }\n/**\n * Inserts the loading bar element into the dom, and sets it to 2%\n * @return {?}\n */\nprivate start(): void {\n        this._startTimeout = setTimeout(() => {\n\n            clearTimeout(this._completeTimeout);\n\n            // do not continually broadcast the started event:\n            if (this._started) { return; }\n\n            this._started = true;\n            this._status = 0;\n\n            if (this._includeBar) {\n                this.show(this._loadingBarContainer);\n            }\n\n            if (this.includeSpinner) {\n                this.show(this._spinner);\n            }\n\n            this.set(this._startSize);\n        }, this._latencyThreshold);\n    }\n/**\n * Set the loading bar's width to a certain percent.\n * \n * @param {?} n any value between 0 and 1\n * @return {?}\n */\nprivate set(n): void {\n        if (!this._started) { return; }\n        const /** @type {?} */ pct = (n * 100) + '%';\n        this.setElementStyle(this._loadingBar, 'width', pct);\n        this._status = n;\n\n        // increment loadingbar to give the illusion that there is always\n        // progress but make sure to cancel the previous timeouts so we don't\n        // have multiple incs running at the same time.\n        if (this._autoIncrement) {\n            clearTimeout(this._incTimeout);\n            this._incTimeout = setTimeout(() => {\n                this.inc();\n            }, 250);\n        }\n    }\n/**\n * @return {?}\n */\nprivate complete(): void {\n        setTimeout(() => {\n            this.set(1);\n\n            clearTimeout(this._completeTimeout);\n            clearTimeout(this._startTimeout);\n\n            // Attempt to aggregate any start/complete calls within 500ms:\n            this._completeTimeout = setTimeout(() => {\n                this._started = false;\n                this.hide(this._loadingBarContainer);\n                this.hide(this._spinner);\n            }, 500);\n        }, this._latencyThreshold);\n    }\n/**\n * Increments the loading bar by a random amount\n * but slows down as it progresses\n * @return {?}\n */\nprivate inc(): void {\n        if (this._status >= 1) {\n            return;\n        }\n\n        let /** @type {?} */ rnd = 0;\n        let /** @type {?} */ stat = this._status;\n        if (stat >= 0 && stat < 0.25) {\n            // Start out between 3 - 6% increments\n            rnd = (Math.random() * (5 - 3 + 1) + 3) / 100;\n        } else if (stat >= 0.25 && stat < 0.65) {\n            // increment between 0 - 3%\n            rnd = (Math.random() * 3) / 100;\n        } else if (stat >= 0.65 && stat < 0.9) {\n            // increment between 0 - 2%\n            rnd = (Math.random() * 2) / 100;\n        } else if (stat >= 0.9 && stat < 0.99) {\n            // finally, increment it .5 %\n            rnd = 0.005;\n        } else {\n            // after 99%, don't increment:\n            rnd = 0;\n        }\n\n        let /** @type {?} */ pct = this._status + rnd;\n        this.set(pct);\n    }\n/**\n * @param {?} el\n * @return {?}\n */\nprivate show(el: any): void {\n        this.setElementStyle(el, 'display', 'block');\n    }\n/**\n * @param {?} el\n * @return {?}\n */\nprivate hide(el: any): void {\n        this.setElementStyle(el, 'display', 'none');\n    }\n/**\n * @param {?} el\n * @param {?} styleName\n * @param {?} styleValue\n * @return {?}\n */\nprivate setElementStyle(el: any, styleName: string, styleValue: string): void {\n        this._renderer.setElementStyle(el.nativeElement, styleName, styleValue);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ng-loading-bar',\n    template: `\n        <div id=\"loading-bar-spinner\" #loadingBarSpinner><div class=\"spinner-icon\"></div></div>\n        <div id=\"loading-bar\" #loadingBarContainer><div class=\"bar\" #loadingBar><div class=\"peg\"></div></div></div>\n    `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: NgLoadingBarHttp, decorators: [{ type: Inject, args: [Http, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_spinner': [{ type: ViewChild, args: ['loadingBarSpinner', ] },],\n'_loadingBarContainer': [{ type: ViewChild, args: ['loadingBarContainer', ] },],\n'_loadingBar': [{ type: ViewChild, args: ['loadingBar', ] },],\n'includeSpinner': [{ type: Input },],\n};\n}\n\nfunction NgLoadingBarComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgLoadingBarComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgLoadingBarComponent.ctorParameters;\n/** @type {?} */\nNgLoadingBarComponent.propDecorators;\n/** @type {?} */\nNgLoadingBarComponent.prototype._spinner;\n/** @type {?} */\nNgLoadingBarComponent.prototype._loadingBarContainer;\n/** @type {?} */\nNgLoadingBarComponent.prototype._loadingBar;\n/** @type {?} */\nNgLoadingBarComponent.prototype.includeSpinner;\n/** @type {?} */\nNgLoadingBarComponent.prototype._autoIncrement;\n/** @type {?} */\nNgLoadingBarComponent.prototype._includeBar;\n/** @type {?} */\nNgLoadingBarComponent.prototype._latencyThreshold;\n/** @type {?} */\nNgLoadingBarComponent.prototype._startSize;\n/** @type {?} */\nNgLoadingBarComponent.prototype._started;\n/** @type {?} */\nNgLoadingBarComponent.prototype._status;\n/** @type {?} */\nNgLoadingBarComponent.prototype._incTimeout;\n/** @type {?} */\nNgLoadingBarComponent.prototype._completeTimeout;\n/** @type {?} */\nNgLoadingBarComponent.prototype._startTimeout;\n/** @type {?} */\nNgLoadingBarComponent.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injector } from '@angular/core';\nimport { Http, Request, Response, RequestOptionsArgs } from '@angular/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport'rxjs/add/operator/share';\n\nexport interface LoadingBarRequestOptionsArgs extends RequestOptionsArgs {\n    ignoreLoadingBar?: boolean;\n}\nexport class NgLoadingBarHttp extends Http {\n    pending = new Subject();\nprivate _pendingRequests: number = 0;\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string|Request, options?: LoadingBarRequestOptionsArgs): Observable<Response> {\n        const /** @type {?} */ response = super.request(url, options).share();\n        if (options && options.ignoreLoadingBar === true) {\n            return response;\n        }\n\n        this.requestStarted();\n        response.subscribe(\n            (x) => {},\n            (err) => this.requestEnded(),\n            () => this.requestEnded(),\n        );\n\n        return response;\n    }\n/**\n * @return {?}\n */\nprivate requestStarted() {\n        this.pending.next({\n            started: this._pendingRequests === 0,\n            pendingRequests: ++this._pendingRequests,\n        });\n    }\n/**\n * @return {?}\n */\nprivate requestEnded() {\n        this.pending.next({\n            completed: this._pendingRequests === 1,\n            pendingRequests: --this._pendingRequests,\n        });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgLoadingBarHttp_tsickle_Closure_declarations() {\n/** @type {?} */\nNgLoadingBarHttp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgLoadingBarHttp.ctorParameters;\n/** @type {?} */\nNgLoadingBarHttp.prototype.pending;\n/** @type {?} */\nNgLoadingBarHttp.prototype._pendingRequests;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}